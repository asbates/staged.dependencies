% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dependencies.R
\name{get_all_external_dependencies}
\alias{get_all_external_dependencies}
\title{List the external R packages required to be installed}
\usage{
get_all_external_dependencies(
  dep_structure,
  available_packages = as.data.frame(utils::available.packages()),
  install_direction = "upstream",
  packages_to_process = NULL,
  include_suggests = FALSE
)
}
\arguments{
\item{dep_structure}{(\code{dependency_structure}) output of function
\code{dependency_table}; uses \code{dep_structure$table} to infer the packages
to apply action to and infer installation order;
uses \code{dep_structure$deps} to infer upstream dependencies}

\item{available_packages}{(\code{data.frame}) A dataframe of the format given by
\code{as.data.frame(utils::available.packages)}. It is unlikely this default needs to be changed;
however you need to ensure the \code{options("repos")} contains the urls of all expected repos
(e.g. Bioconductor).}

\item{install_direction}{"upstream", "downstream" or both; which packages
to install (according to dependency structure). By default this is only "upstream"}

\item{packages_to_process}{(\code{character}) An additional filter, only packages on
this list will be considered (advanced usage only)}

\item{include_suggests}{(\code{logical}) when considering the external packages, should the 'suggests'
packages be considered as dependencies. (This does not affect the Suggests packages of your
internal packages which are always included)}
}
\value{
A vector of 'external' R packages required to install
the selected 'internal' packages. This can be used with \code{remotes::system_requirements}
to extract the system requirements needed for your packages, see example below.
}
\description{
List the external R packages required to be installed
}
\examples{
\dontrun{
  x <- dependency_table("openpharma/stageddeps.electricity",
    project_type = "repo@host", feature = "main")

  # get external package dependencies
  ex_deps <- get_all_external_dependencies(x)
  print(ex_deps)

  # get system dependencies (in this case there are none)
  unique(unlist(lapply(ex_deps,
    function(pkg, ...)
      remotes::system_requirements(package = pkg, ...),
    os = "ubuntu",
    os_release = "20.04")
 ))
}
}
