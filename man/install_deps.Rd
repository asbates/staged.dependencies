% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dependencies.R
\name{install_deps}
\alias{install_deps}
\title{Install dependencies of project corresponding to feature}
\usage{
install_deps(
  dep_structure,
  install_project = TRUE,
  dry_install = FALSE,
  install_direction = "upstream",
  install_external_deps = TRUE,
  dependency_packages = NULL,
  verbose = 0,
  ...
)
}
\arguments{
\item{dep_structure}{(\code{dependency_structure}) output of function
\code{dependency_table}}

\item{install_project}{(\code{logical}) whether to also install the current
package (\code{project})}

\item{dry_install}{(\code{logical}) dry run that lists packages that would be
installed without installing; this still checks out the git repos to
match \code{feature}}

\item{install_direction}{"upstream", "downstream" or both; which packages
to install (according to dependency structure)}

\item{install_external_deps}{logical to describe whether to install
external dependencies of package using \code{remotes::install_deps}.}

\item{verbose}{verbosity level, incremental; from 0 (none) to 2 (high)}

\item{...}{Additional args passed to \verb{remotes::install_deps. Note }upgrade`
is set to "never" and shouldn't be passed into this function.}
}
\value{
installed packages in installation order
}
\description{
This reads the dependencies for the project (recursively) and
installs the right branches based on the feature.
The dependencies can be upstream (by default) and downstream (to
install downstream packages as well).
}
\details{
It throws a warning if the currently checked out branch in the project
is not the one that would be taken based on \code{feature}.
The checked out branch should be a local branch.
}
\examples{
\dontrun{
install_deps()

# install all dependencies
install_deps(direction = c("upstream", "downstream"))

remove.packages("stageddeps.food")
install_deps("../scratch1/stageddeps.food")
}

}
\seealso{
determine_branch
}
